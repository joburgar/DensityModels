#############################################################
# WO_scrUNF.R
# Chapter 18 of SCR book
# created by Joanna Burgar, 30-Jan-2017
# script for estimating density of unmarked populations using scrUN updateY=FALSE
#############################################################
library(snowfall)
library(scrbook)

###--- set directory and load files
setwd("C://Users/JBurgar/Documents/R/Analysis/DensityEstimation/BorealDeerProject/DensityModels/")
DayLookup <- read.csv("StudyDays.csv")
CamXY <- read.csv("CamXY.csv",row.names=1)

###--- Wolf 2012 sampling occassion with most detections
WolfMatrix <- read.csv("Wolf_Matrix.csv",header=T, row.names=1) ## import the Wolf matrix (created in SpatialCountDensity_JBv2.R)

Wolf2012 <- WolfMatrix[,254:345]

WO2012 <- Wolf2012[apply(Wolf2012,1,function(x)!any(is.na(x))), , drop=F]
sum(is.na(WO2012)) # no NAs
sum(WO2012) # 64 detections
dim(WO2012) # 59 92
complete.cases(WolfMatrix[,254:345]) ## rows 32,55,62
62-3 #59 cameras

## 2012 best Wolf detections for 3 WOnths summer ("snow-free") Study days 254:345, also consistent with coyote;

n <- as.matrix(WO2012)

###---- camera station coordinates
summary(CamXY)

# specify how much to buffer sites by (in 10km units, according to coord.scale)
coord.scale <- 10000
buffer <- 1 # 10 km unit buffer

traplocs <- as.matrix(CamXY[, 2:3])           # 62 camera locations in this matrix
X <- traplocs/coord.scale                     # 62 trap coords in 10 km units
X=X[-62,]
X=X[-55,]
X=X[-32,]
dim(X)

###--- create xlims and ylims
Xl <- min(X[, 1] - buffer)
Xu <- max(X[, 1] + buffer)

Yl <- min(X[, 2] - buffer)
Yu <- max(X[, 2] + buffer)
xlims <- c(Xl,Xu); ylims <- c(Yl,Yu)  

area <- (Xu - Xl) * (Yu - Yl) # this is in units of 10 km * 10 km
areakm2 <- (Xu - Xl)*(Yu - Yl)*100
areakm2

###--- create xlims and ylims of scaled coordinates
## page 155 of SCR book "While the scaling of the coordinate system is theoretically irrelevant,
## a poorly scaled coordinate system can produce Markov chains that mix poorly."
X.scaled <- X[,1]-47.6222

Xl.scaled <- min(X.scaled - buffer)
Xu.scaled <- max(X.scaled + buffer)

Y.scaled <- X[,2]-612.3345
Yl.scaled <- min(Y.scaled - buffer)
Yu.scaled <- max(Y.scaled + buffer)
xlims.scaled <- c(Xl.scaled,Xu.scaled); ylims.scaled <- c(Yl.scaled,Yu.scaled)  

areakm2.scaled <- (Xu.scaled - Xl.scaled)*(Yu.scaled - Yl.scaled)*100

X2 <- as.matrix(cbind(X.scaled,Y.scaled))
dim(X2) # scaled traploc matrix in 10 km units

###--- remaining model parameters
M <- 1000 # set to 1000 for all models - relates to density of .15/km2
niter <- 300000 # set to 300,000 for all models

init1 <- list(sigma=rnorm(1,50), lam0=runif(1) , z=rep(1,M))
init2 <- list(sigma=rnorm(1,100), lam0=runif(1) , z=rep(1,M)) #mimic parula example
init3 <- list(sigma=rnorm(1,10), lam0=runif(1) , z=rep(1,M)) 
tune1 <- c(0.1, 0.05, 2) ## need to think about these
tune2 <- c(0.01, 0.01, 0.01) ## need to think about these
tune3 <- c(0.1,0.1,0.1)

###--- execute 1st model - WOout11F
wrapper11F <- function(a){
  WOout11F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune1, updateY=FALSE)
  return(WOout11F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout11FL = sfLapply(1:3,wrapper11F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout11FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout11FL.ET",file="WOout11FL.ET.RData")
save("WOout11FL",file="WOout11FL.RData")

###--- execute 2nd model - WOout12F
wrapper12F <- function(a){
  WOout12F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune2, updateY=FALSE)
  return(WOout12F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout12FL = sfLapply(1:3,wrapper12F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout12FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout12FL.ET",file="WOout12FL.ET.RData")
save("WOout12FL",file="WOout12FL.RData")

###--- execute 3rd model - WOout13F
wrapper13F <- function(a){
  WOout13F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune3, updateY=FALSE)
  return(WOout13F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout13FL = sfLapply(1:3,wrapper13F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout13FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout13FL.ET",file="WOout13FL.ET.RData")
save("WOout13FL",file="WOout13FL.RData")

###--- execute 4th model - WOout21F
wrapper21F <- function(a){
  WOout21F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune1, updateY=FALSE)
  return(WOout21F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout21FL = sfLapply(1:3,wrapper21F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout21FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout21FL.ET",file="WOout21FL.ET.RData")
save("WOout21FL",file="WOout21FL.RData")

###--- execute 5th model - WOout22F
wrapper22F <- function(a){
  WOout22F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune2, updateY=FALSE)
  return(WOout22F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout22FL = sfLapply(1:3,wrapper22F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout22FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout22FL.ET",file="WOout22FL.ET.RData")
save("WOout22FL",file="WOout22FL.RData")

###--- execute 6th model - WOout23F
wrapper23F <- function(a){
  WOout23F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune3, updateY=FALSE)
  return(WOout23F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout23FL = sfLapply(1:3,wrapper23F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout23FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout23FL.ET",file="WOout23FL.ET.RData")
save("WOout23FL",file="WOout23FL.RData")

###--- execute 7th model - WOout31F
wrapper31F <- function(a){
  WOout31F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune1, updateY=FALSE)
  return(WOout31F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout31FL = sfLapply(1:3,wrapper31F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout31FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout31FL.ET",file="WOout31FL.ET.RData")
save("WOout31FL",file="WOout31FL.RData")

###--- execute 8th model - WOout32F
wrapper32F <- function(a){
  WOout32F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune2, updateY=FALSE)
  return(WOout32F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout32FL = sfLapply(1:3,wrapper32F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout32FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout32FL.ET",file="WOout32FL.ET.RData")
save("WOout32FL",file="WOout32FL.RData")

###--- execute 9th model - WOout33F
wrapper33F <- function(a){
  WOout33F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune3, updateY=FALSE)
  return(WOout33F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
WOout33FL = sfLapply(1:3,wrapper33F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
WOout33FL.ET <- difftime(end.time, start.time, units='hours')

save("WOout33FL.ET",file="WOout33FL.ET.RData")
save("WOout33FL",file="WOout33FL.RData")
