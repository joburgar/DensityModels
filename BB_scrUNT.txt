#############################################################
# BB_scrUNT.R
# Chapter 18 of SCR book
# created by Joanna Burgar, 25-Jan-2017
# script for estimating density of unmarked populations using scrUN update=TRUE
#############################################################
library(snowfall)
library(scrbook)

###--- set directory and load files
setwd("C://Users/JBurgar/Documents/R/Analysis/DensityEstimation/BorealDeerProject/")
DayLookup <- read.csv("StudyDays.csv")
BlkBearMatrix <- read.csv("BBMatrix.csv",header=T, row.names=1) ## import the BlkBear matrix (created in SpatialCountDensity_JBv2.R)
CamXY <- read.csv("CamXY.csv",row.names=1)

###--- Black Bear 2012 sampling occassion with most detections
## source BBMatrix directlyl from R script?

sum(BlkBearMatrix[,259:351],na.rm=T)  #157 - 2012 detections between 6-Jul and 6-Oct
BlkBear2012 <- BlkBearMatrix[,259:351]
BB2012 <- BlkBear2012[apply(BlkBear2012,1,function(x)!any(is.na(x))), , drop=F]
sum(is.na(BB2012)) # no NAs
sum(BB2012) # 157 detections
dim(BB2012) # 59 93
complete.cases(BlkBearMatrix[,259:351]) ## rows 32,55,62
62-3 #59 cameras

n <- as.matrix(BB2012)

###---- camera station coordinates
summary(CamXY)

# specify how much to buffer sites by (in 10km units, according to coord.scale)
coord.scale <- 10000
buffer <- 1 # 10 km unit buffer

traplocs <- as.matrix(CamXY[, 2:3])           # 62 camera locations in this matrix
X <- traplocs/coord.scale                     # 62 trap coords in 10 km units
X=X[-62,]
X=X[-55,]
X=X[-32,]
dim(X)

###--- create xlims and ylims
Xl <- min(X[, 1] - buffer)
Xu <- max(X[, 1] + buffer)

Yl <- min(X[, 2] - buffer)
Yu <- max(X[, 2] + buffer)
xlims <- c(Xl,Xu); ylims <- c(Yl,Yu)  

area <- (Xu - Xl) * (Yu - Yl) # this is in units of 10 km * 10 km
areakm2 <- (Xu - Xl)*(Yu - Yl)*100
areakm2

###--- create xlims and ylims of scaled coordinates
## page 155 of SCR book "While the scaling of the coordinate system is theoretically irrelevant,
## a poorly scaled coordinate system can produce Markov chains that mix poorly."
X.scaled <- X[,1]-47.6222

Xl.scaled <- min(X.scaled - buffer)
Xu.scaled <- max(X.scaled + buffer)

Y.scaled <- X[,2]-612.3345
Yl.scaled <- min(Y.scaled - buffer)
Yu.scaled <- max(Y.scaled + buffer)
xlims.scaled <- c(Xl.scaled,Xu.scaled); ylims.scaled <- c(Yl.scaled,Yu.scaled)  

areakm2.scaled <- (Xu.scaled - Xl.scaled)*(Yu.scaled - Yl.scaled)*100

X2 <- as.matrix(cbind(X.scaled,Y.scaled))
dim(X2) # scaled traploc matrix in 10 km units

###--- remaining model parameters
M <- 1000 # set to 1000 for all models - relates to density of .15/km2
niter <- 300000 # set to 300,000 for all models

init1 <- list(sigma=rnorm(1,50), lam0=runif(1) , z=rep(1,M))
init2 <- list(sigma=rnorm(1,100), lam0=runif(1) , z=rep(1,M)) #mimic parula example
init3 <- list(sigma=rnorm(1,10), lam0=runif(1) , z=rep(1,M)) 
tune1 <- c(0.1, 0.05, 2) ## need to think about these
tune2 <- c(0.01, 0.01, 0.01) ## need to think about these
tune3 <- c(0.1,0.1,0.1)

###--- execute 1st model - BBout11T
wrapper11T <- function(a){
  BBout11T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune1, updateY=TRUE)
  return(BBout11T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout11TL = sfLapply(1:3,wrapper11T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout11TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout11TL.ET",file="BBout11TL.ET.RData")
save("BBout11TL",file="BBout11TL.RData")

###--- execute 2nd model - BBout12T
wrapper12T <- function(a){
  BBout12T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune2, updateY=TRUE)
  return(BBout12T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout12TL = sfLapply(1:3,wrapper12T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout12TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout12TL.ET",file="BBout12TL.ET.RData")
save("BBout12TL",file="BBout12TL.RData")

###--- execute 3rd model - BBout13T
wrapper13T <- function(a){
  BBout13T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune3, updateY=TRUE)
  return(BBout13T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout13TL = sfLapply(1:3,wrapper13T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout13TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout13TL.ET",file="BBout13TL.ET.RData")
save("BBout13TL",file="BBout13TL.RData")

###--- execute 4th model - BBout21T
wrapper21T <- function(a){
  BBout21T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune1, updateY=TRUE)
  return(BBout21T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout21TL = sfLapply(1:3,wrapper21T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout21TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout21TL.ET",file="BBout21TL.ET.RData")
save("BBout21TL",file="BBout21TL.RData")

###--- execute 5th model - BBout22T
wrapper22T <- function(a){
  BBout22T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune2, updateY=TRUE)
  return(BBout22T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout22TL = sfLapply(1:3,wrapper22T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout22TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout22TL.ET",file="BBout22TL.ET.RData")
save("BBout22TL",file="BBout22TL.RData")

###--- execute 6th model - BBout23T
wrapper23T <- function(a){
  BBout23T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune3, updateY=TRUE)
  return(BBout23T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout23TL = sfLapply(1:3,wrapper23T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout23TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout23TL.ET",file="BBout23TL.ET.RData")
save("BBout23TL",file="BBout23TL.RData")

###--- execute 7th model - BBout31T
wrapper31T <- function(a){
  BBout31T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune1, updateY=TRUE)
  return(BBout31T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout31TL = sfLapply(1:3,wrapper31T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout31TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout31TL.ET",file="BBout31TL.ET.RData")
save("BBout31TL",file="BBout31TL.RData")

###--- execute 8th model - BBout32T
wrapper32T <- function(a){
  BBout32T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune2, updateY=TRUE)
  return(BBout32T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout32TL = sfLapply(1:3,wrapper32T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout32TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout32TL.ET",file="BBout32TL.ET.RData")
save("BBout32TL",file="BBout32TL.RData")

###--- execute 9th model - BBout33T
wrapper33T <- function(a){
  BBout33T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune3, updateY=TRUE)
  return(BBout33T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
BBout33TL = sfLapply(1:3,wrapper33T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
BBout33TL.ET <- difftime(end.time, start.time, units='hours')

save("BBout33TL.ET",file="BBout33TL.ET.RData")
save("BBout33TL",file="BBout33TL.RData")
