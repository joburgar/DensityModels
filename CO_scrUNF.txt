#############################################################
# CO_scrUNF.R
# Chapter 18 of SCR book
# created by Joanna Burgar, 30-Jan-2017
# script for estimating density of unmarked populations using scrUN update=FALSE
#############################################################

###--- load packakges
library(snowfall)
library(scrbook)

###--- set directory and load files
setwd("C://Users/JBurgar/Documents/R/Analysis/DensityEstimation/BorealDeerProject/DensityModels/")
DayLookup <- read.csv("StudyDays.csv")
BlkBearMatrix <- read.csv("COMatrix.csv",header=T, row.names=1) ## import the BlkBear matrix (created in SpatialCountDensity_JBv2.R)
CamXY <- read.csv("CamXY.csv",row.names=1)

###--- Coyote
CoyoteMatrix <- read.csv("Coyote_Matrix.csv",header=T, row.names=1) ## import the Coyote matrix (created in SpatialCountDensity_JBv2.R)

Coyote2012 <- CoyoteMatrix[,254:345] ## see Species_Detections.R for script identifying these dates as the optimal sampling period for snow-free 2012

CO2012 <- Coyote2012[apply(Coyote2012,1,function(x)!any(is.na(x))), , drop=F]
sum(is.na(CO2012)) # no NAs
sum(CO2012) # 110 detections
dim(CO2012) # 59 92
complete.cases(CoyoteMatrix[,254:345]) ## rows 32,55,62
62-3 #59 cameras

n <- as.matrix(CO2012)

###---- camera station coordinates
summary(CamXY)

# specify how much to buffer sites by (in 10km units, according to coord.scale)
coord.scale <- 10000
buffer <- 1 # 10 km unit buffer

traplocs <- as.matrix(CamXY[, 2:3])           # 62 camera locations in this matrix
X <- traplocs/coord.scale                     # 62 trap coords in 10 km units
X=X[-62,]
X=X[-55,]
X=X[-32,]
dim(X)

###--- create xlims and ylims
Xl <- min(X[, 1] - buffer)
Xu <- max(X[, 1] + buffer)

Yl <- min(X[, 2] - buffer)
Yu <- max(X[, 2] + buffer)
xlims <- c(Xl,Xu); ylims <- c(Yl,Yu)  

area <- (Xu - Xl) * (Yu - Yl) # this is in units of 10 km * 10 km
areakm2 <- (Xu - Xl)*(Yu - Yl)*100


###--- create xlims and ylims of scaled coordinates
## page 155 of SCR book "While the scaling of the coordinate system is theoretically irrelevant,
## a poorly scaled coordinate system can produce Markov chains that mix poorly."
X.scaled <- X[,1]-47.6222

Xl.scaled <- min(X.scaled - buffer)
Xu.scaled <- max(X.scaled + buffer)

Y.scaled <- X[,2]-612.3345
Yl.scaled <- min(Y.scaled - buffer)
Yu.scaled <- max(Y.scaled + buffer)
xlims.scaled <- c(Xl.scaled,Xu.scaled); ylims.scaled <- c(Yl.scaled,Yu.scaled)  

areakm2.scaled <- (Xu.scaled - Xl.scaled)*(Yu.scaled - Yl.scaled)*100

X2 <- as.matrix(cbind(X.scaled,Y.scaled))
dim(X2) # scaled traploc matrix in 10 km units

###--- remaining model parameters
M <- 1000 # set to 1000 for all models - relates to density of .15/km2
niter <- 300000 # set to 300,000 for all models
init1 <- list(sigma=rnorm(1,50), lam0=runif(1) , z=rep(1,M))
init2 <- list(sigma=rnorm(1,100), lam0=runif(1) , z=rep(1,M)) #mimic parula example
init3 <- list(sigma=rnorm(1,150), lam0=runif(1) , z=rep(1,M)) 
tune1 <- c(0.1, 0.05, 2)
tune2 <- c(0.01, 0.01, 0.01)
tune3 <- c(0.1,0.1,0.1)

###--- execute 1st model - COout11F
wrapper11F <- function(a){
  COout11F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune1, updateY=FALSE)
  return(COout11F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout11FL = sfLapply(1:3,wrapper11F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout11FL.ET <- difftime(end.time, start.time, units='hours')

save("COout11FL.ET",file="COout11FL.ET.RData")
save("COout11FL",file="COout11FL.RData")

###--- execute 2nd model - COout12F
wrapper12F <- function(a){
  COout12F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune2, updateY=FALSE)
  return(COout12F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout12FL = sfLapply(1:3,wrapper12F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout12FL.ET <- difftime(end.time, start.time, units='hours')

save("COout12FL.ET",file="COout12FL.ET.RData")
save("COout12FL",file="COout12FL.RData")

###--- execute 3rd model - COout13F
wrapper13F <- function(a){
  COout13F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune3, updateY=FALSE)
  return(COout13F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout13FL = sfLapply(1:3,wrapper13F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout13FL.ET <- difftime(end.time, start.time, units='hours')

save("COout13FL.ET",file="COout13FL.ET.RData")
save("COout13FL",file="COout13FL.RData")

###--- execute 4th model - COout21F
wrapper21F <- function(a){
  COout21F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune1, updateY=FALSE)
  return(COout21F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout21FL = sfLapply(1:3,wrapper21F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout21FL.ET <- difftime(end.time, start.time, units='hours')

save("COout21FL.ET",file="COout21FL.ET.RData")
save("COout21FL",file="COout21FL.RData")

###--- execute 5th model - COout22F
wrapper22F <- function(a){
  COout22F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune2, updateY=FALSE)
  return(COout22F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout22FL = sfLapply(1:3,wrapper22F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout22FL.ET <- difftime(end.time, start.time, units='hours')

save("COout22FL.ET",file="COout22FL.ET.RData")
save("COout22FL",file="COout22FL.RData")

###--- execute 6th model - COout23F
wrapper23F <- function(a){
  COout23F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune3, updateY=FALSE)
  return(COout23F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout23FL = sfLapply(1:3,wrapper23F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout23FL.ET <- difftime(end.time, start.time, units='hours')

save("COout23FL.ET",file="COout23FL.ET.RData")
save("COout23FL",file="COout23FL.RData")

###--- execute 7th model - COout31F
wrapper31F <- function(a){
  COout31F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune1, updateY=FALSE)
  return(COout31F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout31FL = sfLapply(1:3,wrapper31F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout31FL.ET <- difftime(end.time, start.time, units='hours')

save("COout31FL.ET",file="COout31FL.ET.RData")
save("COout31FL",file="COout31FL.RData")

###--- execute 8th model - COout32F
wrapper32F <- function(a){
  COout32F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune2, updateY=FALSE)
  return(COout32F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout32FL = sfLapply(1:3,wrapper32F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout32FL.ET <- difftime(end.time, start.time, units='hours')

save("COout32FL.ET",file="COout32FL.ET.RData")
save("COout32FL",file="COout32FL.RData")

###--- execute 9th model - COout33F
wrapper33F <- function(a){
  COout33F <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune3, updateY=FALSE)
  return(COout33F)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
COout33FL = sfLapply(1:3,wrapper33F) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
COout33FL.ET <- difftime(end.time, start.time, units='hours')

save("COout33FL.ET",file="COout33FL.ET.RData")
save("COout33FL",file="COout33FL.RData")
