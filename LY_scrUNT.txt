#############################################################
# LY_scrUNT..R
# Chapter 18 of SCR book
# created by Joanna Burgar, 30-Jan-2017
# script for estimating density of unmarked populations using scrUN updateY=TRUE
#############################################################
library(snowfall)
library(scrbook)

###--- set directory and load files
setwd("C://Users/JBurgar/Documents/R/Analysis/DensityEstimation/BorealDeerProject/DensityModels/")
DayLookup <- read.csv("StudyDays.csv")
CamXY <- read.csv("CamXY.csv",row.names=1)

###--- Lynx 2012 sampling occassion with most detections
LynxMatrix <- read.csv("Lynx_Matrix.csv",header=T, row.names=1) ## import the Lynx matrix (created in SpatialCountDensity_JBv2.R)

Lynx2012 <- LynxMatrix[,259:351]

LY2012 <- Lynx2012[apply(Lynx2012,1,function(x)!any(is.na(x))), , drop=F]
sum(is.na(LY2012)) # no NAs
sum(LY2012) # 90 detections
dim(LY2012) # 59 93
complete.cases(LynxMatrix[,259:351]) ## rows 32,55,62
62-3 #59 cameras
plot(apply(LY2012,2,function(x) sum(x)), xlab= "Study Day", ylab= "Daily Detections",cex.lab=1.4)

## 2012 best Lynx detections for 3 months summer ("snow-free") Study days 259:351;

n <- as.matrix(LY2012)

###---- camera station coordinates
summary(CamXY)

# specify how much to buffer sites by (in 10km units, according to coord.scale)
coord.scale <- 10000
buffer <- 1 # 10 km unit buffer

traplocs <- as.matrix(CamXY[, 2:3])           # 62 camera locations in this matrix
X <- traplocs/coord.scale                     # 62 trap coords in 10 km units
X=X[-62,]
X=X[-55,]
X=X[-32,]
dim(X)

###--- create xlims and ylims
Xl <- min(X[, 1] - buffer)
Xu <- max(X[, 1] + buffer)

Yl <- min(X[, 2] - buffer)
Yu <- max(X[, 2] + buffer)
xlims <- c(Xl,Xu); ylims <- c(Yl,Yu)  

area <- (Xu - Xl) * (Yu - Yl) # this is in units of 10 km * 10 km
areakm2 <- (Xu - Xl)*(Yu - Yl)*100
areakm2

###--- create xlims and ylims of scaled coordinates
## page 155 of SCR book "While the scaling of the coordinate system is theoretically irrelevant,
## a poorly scaled coordinate system can produce Markov chains that mix poorly."
X.scaled <- X[,1]-47.6222

Xl.scaled <- min(X.scaled - buffer)
Xu.scaled <- max(X.scaled + buffer)

Y.scaled <- X[,2]-612.3345
Yl.scaled <- min(Y.scaled - buffer)
Yu.scaled <- max(Y.scaled + buffer)
xlims.scaled <- c(Xl.scaled,Xu.scaled); ylims.scaled <- c(Yl.scaled,Yu.scaled)  

areakm2.scaled <- (Xu.scaled - Xl.scaled)*(Yu.scaled - Yl.scaled)*100

X2 <- as.matrix(cbind(X.scaled,Y.scaled))
dim(X2) # scaled traploc matrix in 10 km units

###--- remaining model parameters
M <- 1000 # set to 1000 for all models - relates to density of .15/km2
niter <- 300000 # set to 300,000 for all models

init1 <- list(sigma=rnorm(1,50), lam0=runif(1) , z=rep(1,M))
init2 <- list(sigma=rnorm(1,100), lam0=runif(1) , z=rep(1,M)) #mimic parula example
init3 <- list(sigma=rnorm(1,10), lam0=runif(1) , z=rep(1,M)) 
tune1 <- c(0.1, 0.05, 2) ## need to think about these
tune2 <- c(0.01, 0.01, 0.01) ## need to think about these
tune3 <- c(0.1,0.1,0.1)

###--- execute 1st model - LYout11T
wrapper11T <- function(a){
  LYout11T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune1, updateY=TRUE)
  return(LYout11T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout11TL = sfLapply(1:3,wrapper11T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout11TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout11TL.ET",file="LYout11TL.ET.RData")
save("LYout11TL",file="LYout11TL.RData")

###--- execute 2nd model - LYout12T
wrapper12T <- function(a){
  LYout12T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune2, updateY=TRUE)
  return(LYout12T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout12TL = sfLapply(1:3,wrapper12T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout12TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout12TL.ET",file="LYout12TL.ET.RData")
save("LYout12TL",file="LYout12TL.RData")

###--- execute 3rd model - LYout13T
wrapper13T <- function(a){
  LYout13T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init1, tune=tune3, updateY=TRUE)
  return(LYout13T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout13TL = sfLapply(1:3,wrapper13T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout13TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout13TL.ET",file="LYout13TL.ET.RData")
save("LYout13TL",file="LYout13TL.RData")

###--- execute 4th model - LYout21T
wrapper21T <- function(a){
  LYout21T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune1, updateY=TRUE)
  return(LYout21T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout21TL = sfLapply(1:3,wrapper21T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout21TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout21TL.ET",file="LYout21TL.ET.RData")
save("LYout21TL",file="LYout21TL.RData")

###--- execute 5th model - LYout22T
wrapper22T <- function(a){
  LYout22T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune2, updateY=TRUE)
  return(LYout22T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout22TL = sfLapply(1:3,wrapper22T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout22TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout22TL.ET",file="LYout22TL.ET.RData")
save("LYout22TL",file="LYout22TL.RData")

###--- execute 6th model - LYout23T
wrapper23T <- function(a){
  LYout23T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init2, tune=tune3, updateY=TRUE)
  return(LYout23T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout23TL = sfLapply(1:3,wrapper23T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout23TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout23TL.ET",file="LYout23TL.ET.RData")
save("LYout23TL",file="LYout23TL.RData")

###--- execute 7th model - LYout31T
wrapper31T <- function(a){
  LYout31T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune1, updateY=TRUE)
  return(LYout31T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout31TL = sfLapply(1:3,wrapper31T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout31TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout31TL.ET",file="LYout31TL.ET.RData")
save("LYout31TL",file="LYout31TL.RData")

###--- execute 8th model - LYout32T
wrapper32T <- function(a){
  LYout32T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune2, updateY=TRUE)
  return(LYout32T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout32TL = sfLapply(1:3,wrapper32T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout32TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout32TL.ET",file="LYout32TL.ET.RData")
save("LYout32TL",file="LYout32TL.RData")

###--- execute 9th model - LYout33T
wrapper33T <- function(a){
  LYout33T <- scrUN(n=n, X=X, M=M, niter=niter, xlims=xlims.scaled, ylims=ylims.scaled, inits=init3, tune=tune3, updateY=TRUE)
  return(LYout33T)
}

(start.time <- Sys.time())
sfInit(parallel=TRUE, cpus=3) #initialize cluster
sfLibrary(scrbook) #export library scrbook
sfExportAll() # export all data in current workspace
sfClusterSetupRNG() #set up random number generator
LYout33TL = sfLapply(1:3,wrapper33T) # execute 'wrapper' 3 times
sfStop() # terminate the cluster
(end.time <- Sys.time())
LYout33TL.ET <- difftime(end.time, start.time, units='hours')

save("LYout33TL.ET",file="LYout33TL.ET.RData")
save("LYout33TL",file="LYout33TL.RData")
